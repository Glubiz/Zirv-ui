name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  format-and-compile:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_PAT }}

    - name: Set up Nightly Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal

    - name: Install rustfmt
      run: rustup component add rustfmt --toolchain nightly

    - name: Format code with rustfmt
      run: cargo +nightly fmt --all

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Compile SCSS
      run: npm run compile-scss

    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        git commit -m "Format code with rustfmt and compile SCSS" || echo "No changes to commit"
        git push origin main || echo "No changes to push"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
  
    - name: Get latest tag and bump version
      id: bump_version
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        IFS='.' read -ra ADDR <<< "$latest_tag"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        new_patch=$((patch + 1))
        new_tag="${major}.${minor}.${new_patch}"
        echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${new_tag} -m "Bump version to ${new_tag}"
        git push origin ${new_tag}

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.GH_DOCKER_USERNAME }}
        password: ${{ secrets.GH_DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.GH_DOCKER_USERNAME }}/zirv-ui:${{ steps.bump_version.outputs.new_tag }} .
        docker push ${{ secrets.GH_DOCKER_USERNAME }}/zirv-ui:${{ steps.bump_version.outputs.new_tag }}