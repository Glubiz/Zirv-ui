name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - name: Cache Rust dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build with cargo
      run: cargo build --release

    - name: Run tests
      run: cargo test --release

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/my-rust-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Deploy to production
      run: echo "Deployment step (e.g., using SSH, kubectl, etc.)"
      # Add your deployment steps here, such as:
      # - name: SSH and deploy
      #   run: |
      #     ssh user@server "docker pull ${{ secrets.DOCKER_USERNAME }}/my-rust-app:latest && docker run -d --name my-rust-app ${{ secrets.DOCKER_USERNAME }}/my-rust-app:latest"
      # or using Kubernetes
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl set image deployment/my-rust-app my-rust-app=${{ secrets.DOCKER_USERNAME }}/my-rust-app:latest
